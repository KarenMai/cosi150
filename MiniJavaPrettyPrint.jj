PARSER_BEGIN(MiniJavaPrettyPrint)
import java.io.*;
import java.text.ParseException; // Add this import statement

public class MiniJavaPrettyPrint {
    public static void main(String[] args) throws ParseException, IOException {
        MiniJavaPrettyPrint parser = new MiniJavaPrettyPrint(System.in);
        parser.program();
    }
}
PARSER_END(MiniJavaPrettyPrint)

// Parser rules
void program() : {}
{
    ( classDeclaration() )*
}

void classDeclaration() : {}
{
    "class" <IDENTIFIER> "{" ( memberDeclaration() )* "}"
}

void memberDeclaration() : {}
{
    ( fieldDeclaration() | methodDeclaration() )
}

void fieldDeclaration() : {}
{
    type() <IDENTIFIER> ";"
}

void methodDeclaration() : {}
{
    type() <IDENTIFIER> "(" ( parameterList() )? ")" "{" ( statement() )* "}"
}

void parameterList() : {}
{
    type() <IDENTIFIER> ( "," type() <IDENTIFIER> )*
}

void type() : {}
{
    // Define rules for types (int, boolean, etc.)
    <IDENTIFIER>
}

void statement() : {}
{
    ( block() | ifStatement() | whileStatement() | returnStatement() | expressionStatement() )
}

void block() : {}
{
    "{" ( statement() )* "}"
}

void ifStatement() : {}
{
    "if" "(" expression() ")" statement() ( "else" statement() )?
}

void whileStatement() : {}
{
    "while" "(" expression() ")" statement()
}

void returnStatement() : {}
{
    "return" ( expression() )? ";"
}

void expressionStatement() : {}
{
    expression() ";"
}

void expression() : {}
{
    ( 
      primaryExpression()
      | arithmeticExpression()
      | booleanExpression()
      | methodCall()
      | variableReference()
      | literal()
      | parenthesizedExpression()
    )
}

void primaryExpression() : {}
{
    <IDENTIFIER>
}

void arithmeticExpression() : {}
{
    expression() <OPERATOR> expression()
}

void booleanExpression() : {}
{
    expression() <OPERATOR> expression()
}

void methodCall() : {}
{
    <IDENTIFIER> "(" ( expressionList() )? ")"
}

void expressionList() : {}
{
    expression() ( "," expression() )*
}

void variableReference() : {}
{
    <IDENTIFIER>
}

void literal() : {}
{
    <INTEGER_LITERAL> | <STRING_LITERAL> | <BOOLEAN_LITERAL>
}

void parenthesizedExpression() : {}
{
    "(" expression() ")"
}

// Token definitions
TOKEN : {
    <IDENTIFIER: (["a"-"z","A"-"Z"])(["a"-"z","A"-"Z","0"-"9","_"])*>
    <INTEGER_LITERAL: (["0"-"9"])+>
    <LBRACE: "{">
    <RBRACE: "}">
    <STRING_LITERAL: "\"" (~["\"","\n","\r"])* "\"">
    <BOOLEAN_LITERAL: "true" | "false">
    <PLUS: "+">
    <MINUS: "-">
    <MULTIPLY: "*">
    <DIVIDE: "/">
    // Add more tokens as needed
    <WHITESPACE: [" ", "\t", "\r", "\n"]> 
    // Ignore whitespace
    SKIP: {
        <WHITESPACE>
    }
}